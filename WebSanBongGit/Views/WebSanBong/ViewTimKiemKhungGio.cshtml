
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="~/Content/cssTimKiemSanTrong.css" rel="stylesheet" />
    <link href="~/Content/grid.css" rel="stylesheet" />
    <link href="~/Content/style_main1.css" rel="stylesheet" />
    <link href="~/Content/cssLoad/load1.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <title>Document</title>
</head>
<body>
    <div id="loader">

        <div class="wrapper">
            <div class="circle"></div>
            <div class="circle"></div>
            <div class="circle"></div>
            <div class="shadow"></div>
            <div class="shadow"></div>
            <div class="shadow"></div>
        </div>
        <div class="text" style="font-size:24px">Vui Lòng Đợi Trong Giây Lát ...</div>
    </div>
    <div class="blur">
        <div class="form_dat_san">

            <div class="form_dat_san--main">
                <div class="form_dat_san--main-title">Thông Tin Sân Đặt</div>
                <div class="form-group-custom">
                    <label>Mã Sân</label>
                    <input type="text" id="PAY-MA_SAN" readonly />
                </div>
                <div class="form-group-custom">
                    <label>Ngày Đá</label>
                    <input type="date" id="PAY-NGAY_DA" readonly />
                </div>
                <div class="form-group-custom editS_Start">
                    <label>Giờ Bắt Đầu</label>
                    <div class="form_select">
                        <select id="slect_start_hours">
                        </select>
                        <select id="slect_start_minute">
                        </select>
                    </div>
                </div>
                <div class="form-group-custom editS_End">
                    <label>Giờ Kết Thúc</label>
                    <div class="form_select">
                        <select id="slect_end_hours">
                        </select>
                        <select id="slect_end_minute">
                        </select>
                    </div>
                </div>
                <div class="form-group-custom">
                    <label>Giá Sân</label>
                    <input type="text" id="PAY-GIA_SAN" readonly />
                </div>
                <div class="form-group-custom">
                    <label>Loại Sân</label>
                    <input type="text" id="PAY-LOAI_SAN" readonly />
                </div>
                <div class="form-group-custom">
                    <label>Tên Sân</label>
                    <input type="text" id="PAY-TEN_SAN" readonly />
                </div>
                <button id="submit_DAT_SAN">Đặt Sân</button>
            </div>
        </div>
    </div>

    <section id="TimKiemSanTrong">
        <div class="TimKiemSanMain">
            <div class="title_tk"> Tìm Kiếm Sân Trống</div>
            <div class="grid wide">
                <div class="row no-gutters edittor">
                    <div class="col l-6">

                        <div class="TimKiemSanMain_col_left_action">
                            <div class="row no-gutters">
                                <div class="col l-6">
                                    <div class="TimKiemSanMain_col_left_action_Date">

                                        <label for="TimKiemSanMain_col_left_action_type-StartDate">Ngày Bắt Đầu</label>
                                        <input type="date" id="TimKiemSanMain_col_left_action_type-StartDate">
                                        <span class="messErr"></span>

                                    </div>
                                </div>

                                <div class="col l-6">
                                    <div class="TimKiemSanMain_col_left_action_Date">
                                        <label for="TimKiemSanMain_col_left_action_type-endDate">Ngày Kết Thúc</label>
                                        <input type="date" id="TimKiemSanMain_col_left_action_type-endDate">
                                        <span class="messErr"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row no-gutters ">
                                <div class="col l-6">
                                    <div class="TimKiemSanMain_col_left_action_Time">
                                        <div class="opion_StartTime cssCHUNGoption">
                                            <select id="opion_StartTime_hours">
                                            </select>
                                            <select id="opion_StartTime_minute">
                                            </select>
                                        </div>
                                        <div class="cssChungInput">
                                            <label for="TimKiemSanMain_col_left_action_type-StartTime">Giờ Bắt Đầu</label>
                                            <input type="text" id="TimKiemSanMain_col_left_action_type-StartTime" readonly>
                                            <span class="messErr"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col l-6">
                                    <div class="TimKiemSanMain_col_left_action_Time">
                                        <div class="opion_EndTime cssCHUNGoption">
                                            <select id="opion_EndTime_hours">
                                            </select>
                                            <select id="opion_EndTime_minute">
                                            </select>
                                        </div>
                                        <div class="cssChungInput">
                                            <label for="TimKiemSanMain_col_left_action_type-endTime">Giờ Kết Thúc</label>
                                            <input type="text" id="TimKiemSanMain_col_left_action_type-endTime" readonly>
                                            <span class="messErr"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button class="btn_timKiem_sanTrong">
                                Tìm Kiếm
                            </button>
                            <a id="id_quayLai" href="/WebSanBong/ListSan">Trở Lại </a>
                        </div>

                    </div>
                    <div class="col l-6">
                        <div class="TimKiemSanMain_col_rigth">
                            <div class="BOX_TimKiemSanMain_col_rigth_body">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</body>

</html>

<script>
    const S = document.querySelector.bind(document)
    const SS = document.querySelectorAll.bind(document)

    var StartTimeEdit
    var EndTimeEdit
    let NGAY_BD = ""
    let NGAY_KT = ""
    let today = new Date()
    let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
    let dateNow = new Date(date)
    let isNgayHienHanh = true
    let isGioHienHang = true
    let isSoSanhNgay = true
    let isSoSangTime = true

    const Dom_inputStartDate = S("#TimKiemSanMain_col_left_action_type-StartDate")
    const Dom_inputEndDate = S("#TimKiemSanMain_col_left_action_type-endDate")
    const Dom_inputStartTime = S("#TimKiemSanMain_col_left_action_type-StartTime")
    const Dom_inputEndTime = S("#TimKiemSanMain_col_left_action_type-endTime")
    const Dom_optionStartTime = S(".opion_StartTime")
    const Dom_optionEndTime = S(".opion_EndTime")
    const Dom_opion_StartTime_hours = S("#opion_StartTime_hours")
    const Dom_opion_StartTime_minute = S("#opion_StartTime_minute")
    const Dom_opion_endTime_hours = S("#opion_EndTime_hours")
    const Dom_opion_endTime_minute = S("#opion_EndTime_minute")
    const DomDateStart = S("#TimKiemSanMain_col_left_action_type-StartDate")
    const DomDateEnd = S("#TimKiemSanMain_col_left_action_type-endDate")
    const btn_TimKiem = S('.btn_timKiem_sanTrong')
    var load = document.querySelector('#loader')
    var loaderON_OFF = function (IsOn_OFF) {
        if (IsOn_OFF) {
            load.style.display = 'flex';
        } else {
            load.style.display = 'none';
        }

    };


    window.onclick = (e) => {
        let IsReMoveStartOption = e.target.closest(".opion_StartTime")
        let IsReMoveStartInput = e.target.closest("#TimKiemSanMain_col_left_action_type-StartTime")
        let IsReMoveEndOption = e.target.closest(".opion_EndTime")
        let IsReMoveEndInput = e.target.closest("#TimKiemSanMain_col_left_action_type-endTime")
        if (!IsReMoveStartOption && !IsReMoveStartInput) {
            Dom_optionStartTime.style.display = "none"
        } else {
            Dom_optionStartTime.style.display = "block"
        }

        if (!IsReMoveEndOption && !IsReMoveEndInput) {
            Dom_optionEndTime.style.display = "none"
        } else {
            Dom_optionEndTime.style.display = "block"
        }

    }
    function KiemTraTime() {

        let sumhours = parseInt(Dom_opion_StartTime_hours.value) + '' + Dom_opion_StartTime_minute.value
        let timeNow = parseInt(today.getMinutes()) < 10 ?
            `${today.getHours()}0${today.getMinutes()}` :
            `${today.getHours()}${today.getMinutes()}`


        if (parseInt(sumhours) < parseInt(timeNow) && new Date(DomDateStart.value).getTime() == dateNow.getTime()) {

            isGioHienHang = false
        }
        else {

            isGioHienHang = true
        }

        if (isGioHienHang) {
            S('#TimKiemSanMain_col_left_action_type-StartTime ~ span').textContent = ""
            Dom_inputStartTime.style.border = "none"
        }
        else {
            S('#TimKiemSanMain_col_left_action_type-StartTime ~ span').textContent = "Chọn giờ lớn hơn hoặc bằng giờ hiện tại"
            Dom_inputStartTime.style.border = "2px solid red"
        }
        if (isGioHienHang == true && isSoSangTime == false) {
            S('#TimKiemSanMain_col_left_action_type-endTime').style.border = "2px solid red"
            S('#TimKiemSanMain_col_left_action_type-endTime ~ span').textContent = "Chọn lớn hơn giờ bắt đầu"
            S('#TimKiemSanMain_col_left_action_type-StartTime').style.border = "2px solid red"
            S('#TimKiemSanMain_col_left_action_type-StartTime ~ span').textContent = "Chọn bé hơn giờ bắt đầu"
        }
    }

    if (Dom_opion_StartTime_hours) {
        let value_timeKT
        let value_timeBD
        Dom_opion_StartTime_hours.oninput = () => {
            sosanhActiveTime()
            KiemTraTime()
        }
        Dom_opion_StartTime_minute.oninput = () => {
            sosanhActiveTime()
            KiemTraTime()
        }
        Dom_opion_endTime_hours.oninput = () => {
            sosanhActiveTime()
            KiemTraTime()
        }
        Dom_opion_endTime_minute.oninput = () => {
            sosanhActiveTime()
            KiemTraTime()
        }
    }
    function sosanhActiveTime() {
        value_timeKT = parseInt(`${Dom_opion_endTime_hours.value}${Dom_opion_endTime_minute.value}`)
        value_timeBD = parseInt(`${Dom_opion_StartTime_hours.value}${Dom_opion_StartTime_minute.value}`)
        if (value_timeBD >= value_timeKT) {

            isSoSangTime = false
            S('#TimKiemSanMain_col_left_action_type-endTime').style.border = "2px solid red"
            S('#TimKiemSanMain_col_left_action_type-endTime ~ span').textContent = "Chọn lớn hơn giờ bắt đầu"
            S('#TimKiemSanMain_col_left_action_type-StartTime').style.border = "2px solid red"
            S('#TimKiemSanMain_col_left_action_type-StartTime ~ span').textContent = "Chọn bé hơn giờ bắt đầu"
        }
        else {
            isSoSangTime = true
            S('#TimKiemSanMain_col_left_action_type-endTime').style.border = "none"
            S('#TimKiemSanMain_col_left_action_type-endTime ~ span').textContent = ""
            S('#TimKiemSanMain_col_left_action_type-StartTime').style.border = "none"
            S('#TimKiemSanMain_col_left_action_type-StartTime ~ span').textContent = ""
        }
    }
    if (DomDateStart) {
        let valueDomDateStartSS
        let valueDomDateEndSS
        function xulySoSanhNgat(isSoSanhNgay, DomDateStart, DomDateEnd) {
            if (isSoSanhNgay) {
                DomDateStart.style.border = "none"
                DomDateEnd.style.border = "none"
                S('#TimKiemSanMain_col_left_action_type-endDate ~ span ').textContent = ""
                S('#TimKiemSanMain_col_left_action_type-StartDate ~ span ').textContent = ""

            } else {
                DomDateStart.style.border = "2px solid  red "
                S('#TimKiemSanMain_col_left_action_type-StartDate ~ span ').textContent = "Chọn bé hơn hoặc bằng giờ bắt đầu"
                DomDateEnd.style.border = "2px solid  red "
                S('#TimKiemSanMain_col_left_action_type-endDate ~ span ').textContent = "Chọn lớn hơn hoặc bằng giờ bắt đầu"
            }
        }

        DomDateStart.oninput = () => {
            valueDomDateStartSS = new Date(DomDateStart.value)
            valueDomDateEndSS = new Date(DomDateEnd.value)

            if (new Date(DomDateStart.value).getTime() >= dateNow.getTime() || DomDateStart.value.trim() == "") {
                DomDateStart.style.border = "none";
                S("#TimKiemSanMain_col_left_action_type-StartDate ~ span").textContent = ""
                isNgayHienHanh = true
            }
            else {
                DomDateStart.style.border = "2px solid  red";
                isNgayHienHanh = false
                S("#TimKiemSanMain_col_left_action_type-StartDate ~ span").textContent = "Chọn lớn hơn hoặc bằng ngày hiện tại"
            }



            if (DomDateStart.value != "" && DomDateEnd.value != "") {
                if (valueDomDateStartSS <= valueDomDateEndSS) {
                    console.log("dung")
                    isSoSanhNgay = true
                } else {
                    console.log("sai")
                    isSoSanhNgay = false
                }
                xulySoSanhNgat(isSoSanhNgay, DomDateStart, DomDateEnd)
            }

            if (!isNgayHienHanh) {
                DomDateStart.style.border = "2px solid  red";

                S("#TimKiemSanMain_col_left_action_type-StartDate ~ span").textContent = "Chọn lớn hơn hoặc bằng ngày hiện tại"
            }
            KiemTraTime()
            NGAY_BD = DomDateStart.value
            NGAY_KT = DomDateEnd.value

        }

        DomDateEnd.oninput = () => {
            valueDomDateStartSS = new Date(DomDateStart.value)
            valueDomDateEndSS = new Date(DomDateEnd.value)

            if (DomDateStart.value != "" && DomDateEnd.value != "") {
                if (valueDomDateStartSS <= valueDomDateEndSS) {
                    console.log("dung")
                    isSoSanhNgay = true

                } else {
                    console.log("sai")
                    isSoSanhNgay = false
                }
                xulySoSanhNgat(isSoSanhNgay, DomDateStart, DomDateEnd)
            }
            if (!isNgayHienHanh) {
                DomDateStart.style.border = "2px solid  red";
                S("#TimKiemSanMain_col_left_action_type-StartDate ~ span").textContent = "Chọn lớn hơn hoặc bằng ngày hiện tại"
            }
            KiemTraTime()
            NGAY_BD = DomDateStart.value
            NGAY_KT = DomDateEnd.value

        }
    }

    btn_TimKiem.onclick = () => {

        if (Dom_inputStartDate.value == "" || Dom_inputEndDate.value == "" || Dom_inputStartTime.value == "" || Dom_inputEndTime.value == "") {
            alert("vui lòng nhập đầy đủ dữ liệu để tìm kiếm")
        }
        else {
            if (isNgayHienHanh && isSoSanhNgay && isSoSangTime && isGioHienHang) {

                TimeSAN_CHUA_DA(KhoanTime(StartTimeEdit, EndTimeEdit), NGAY_BD, NGAY_KT)
            }
        }
    }



    //-----------------------------------------------------------------------------------------
    loadTimKiem()
    loadSophut()
    loadKhoangTimeEdit()




    function loadKhoangTimeEdit() {
        Dom_opion_StartTime_hours.onchange = () => {
            const valueInputStartTime = `${Dom_opion_StartTime_hours.value}:${Dom_opion_StartTime_minute.value}`
            Dom_inputStartTime.value = valueInputStartTime

            if (parseInt(Dom_opion_StartTime_minute.value) == 30) {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}50`
            }
            else {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}00`
            }


            if (parseInt(Dom_opion_endTime_minute.value) == 30) {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}50`
            } else {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}00`
            }


        }
        Dom_opion_StartTime_minute.onchange = () => {
            const valueInputStartTime = `${Dom_opion_StartTime_hours.value}:${Dom_opion_StartTime_minute.value}`
            Dom_inputStartTime.value = valueInputStartTime

            if (parseInt(Dom_opion_StartTime_minute.value) == 30) {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}50`
            }
            else {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}00`
            }
            if (parseInt(Dom_opion_endTime_minute.value) == 30) {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}50`
            }
            else {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}00`
            }
            console.log(KhoanTime(StartTimeEdit, EndTimeEdit))

        }
        Dom_opion_endTime_hours.onchange = () => {
            const valueInputEndTime = `${Dom_opion_endTime_hours.value}:${Dom_opion_endTime_minute.value}`
            Dom_inputEndTime.value = valueInputEndTime
            if (parseInt(Dom_opion_StartTime_minute.value) == 30) {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}50`
            }
            else {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}00`
            }
            if (parseInt(Dom_opion_endTime_minute.value) == 30) {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}50`
            }
            else {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}00`
            }


        }
        Dom_opion_endTime_minute.onchange = () => {
            const valueInputEndTime = `${Dom_opion_endTime_hours.value}:${Dom_opion_endTime_minute.value}`
            Dom_inputEndTime.value = valueInputEndTime

            if (parseInt(Dom_opion_StartTime_minute.value) == 30) {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}50`
            }
            else {
                StartTimeEdit = `${Dom_opion_StartTime_hours.value}00`
            }
            if (parseInt(Dom_opion_endTime_minute.value) == 30) {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}50`
            }
            else {
                EndTimeEdit = `${Dom_opion_endTime_hours.value}00`
            }

            console.log(KhoanTime(StartTimeEdit, EndTimeEdit))

        }
    }

    function loadTimKiem() {
        // lay Khoang thoi gian
        fetch("/WebSanBong/ListTime")
            .then(reponseve => reponseve.json())
            .then(({ dsTime }) => {
                // load time
                loadTime(dsTime)
            })

    }
    function loadSophut() {
        fetch('/WebSanBong/ListTimephut')
            .then(reposive => reposive.json())
            .then(({ dsphut }) => {
                let htmlP = dsphut.map(item => `<option value="${item.SO_PHUT.trim()}"> ${item.SO_PHUT.trim()}</option>`).join('')
                Dom_opion_StartTime_minute.innerHTML = htmlP
                Dom_opion_endTime_minute.innerHTML = htmlP
                S('#slect_start_minute').innerHTML = htmlP
                S('#slect_end_minute').innerHTML = htmlP

            })
    }
    function loadTime(data) {
        const htmlhours = data.map(item => `<option value="${item.SO_GIO.trim()}"> ${item.SO_GIO.trim()}</option>`)
        Dom_opion_StartTime_hours.innerHTML = htmlhours.join('')
        Dom_opion_endTime_hours.innerHTML = htmlhours.join('')
    }
    //ham code chuc nang

    function TimeSAN_CHUA_DA(KHUNG_GIO, NGAY_BD, NGAY_KT) {
        fetch(`/WebSanBong/ListDDS`, {
            method: 'POST',
            body: JSON.stringify({
                NGAY_BD: NGAY_BD,
                NGAY_KT: NGAY_KT
            }),
            headers: {
                'Content-type': 'application/json; charset=UTF-8',
            },
        })
            .then((response) => response.json())
            .then(({ dsDon }) => {
                // bien can dung
                let Listngay1 = ListDate(Dom_inputStartDate.value, Dom_inputEndDate.value)
                console.log(dsDon)
                if (dsDon != undefined) {
                    if (dsDon.length != 0) {
                        const data_GIO_SAN = KHUNG_GIO
                        const IS_ARRAAY = IsArray(dsDon)
                        const data_time_trong = dataTimeTrong(dsDon, data_GIO_SAN)
                        const DataKhungGioChuaDa = customArray2(IS_ARRAAY, data_time_trong, data_GIO_SAN)
                        const DataKhungGioChuaDa2 = customDATA_KHUNGGIO_CHUA_DA(DataKhungGioChuaDa)
                        const DataChuaDa = customDATA_KHUNGGIO_CHUA_DA2(DataKhungGioChuaDa2)

                        //data cuoi

                        console.log(DataChuaDa)
                        const arraychuadat2 = DataChuaDa.reduce((lutru, item1, index1) => {
                            lutru.push({
                                MA_SAN: item1.MA_SAN,
                                LOAI_SAN: item1.LOAI_SAN,
                                TEN_SAN: item1.TEN_SAN,
                                GIA_SAN: item1.GIA_SAN,
                                LisDateTimeChuaDa: []
                            })
                            let arris = []
                            item1.LisDateTimeChuaDa.forEach((item2, index2) => {

                                let arr2 = []

                                Listngay1.forEach((item_ListNgay, vt) => {
                                    if (item_ListNgay == item2.NGAY_DA) {
                                        arris.push(item_ListNgay)
                                    }
                                    if (!arris.includes(item_ListNgay)) {
                                        arr2.push({ NGAY_DA: item_ListNgay, ListTimeChuaDa: [] })
                                    }
                                })


                                lutru[index1].LisDateTimeChuaDa.push({ NGAY_DA: item2.NGAY_DA, ListTimeChuaDa: [] })
                                item2.ListTimeChuaDa.forEach(item3 => {
                                    lutru[index1].LisDateTimeChuaDa[index2].ListTimeChuaDa.push({ timeBD: item3.timeBD, timeKT: item3.timeKT })

                                })

                                if (index2 == item1.LisDateTimeChuaDa.length - 1) {

                                    arr2.forEach(item_arr2 => {
                                        lutru[index1].LisDateTimeChuaDa.push(item_arr2)
                                    })

                                }


                            })
                            return lutru
                        }, [])

                        TimKiemAllSanChuaDa(arraychuadat2, NGAY_BD, NGAY_KT, Listngay1)

                    }
                    else {
                        alert("chua co nguoi da")
                        TimKiemAllSanChuaDa_NO_DATA_DON_DAT_SAN(NGAY_BD, NGAY_KT, Listngay1)
                    }
                }
                else {
                    alert("chua co nguoi da")
                    TimKiemAllSanChuaDa_NO_DATA_DON_DAT_SAN(NGAY_BD, NGAY_KT, Listngay1)

                }
                //code chuc nang tim kiem khung gio

            });
    }
    function TimKiemAllSanChuaDa_NO_DATA_DON_DAT_SAN(NGAY_BD, NGAY_KT, Listngay1) {
        fetch('/WebSanBong/ListSAN1')
            .then(reponsive => reponsive.json())
            .then(({ dsSan }) => {
                let arraychuadat = dsSan.reduce((lutru, item_dsSan) => {
                    lutru.push({
                        MA_SAN: item_dsSan.MA_SAN,
                        LOAI_SAN: item_dsSan.LOAI_SAN,
                        TEN_SAN: item_dsSan.TEN_SAN,
                        GIA_SAN: item_dsSan.GIA_SAN,
                        LisDateTimeChuaDa: Listngay1.map(item => ({
                            NGAY_DA: item,
                            ListTimeChuaDa: []
                        }))

                    })
                    return lutru
                }, [])

                console.log(arraychuadat)
                const htmlitem = arraychuadat.map(item => `<div class="BOX_CHILD" data-id="${item.MA_SAN}">
                                <div class="rigth_body_title_san">
                                    <div class="rigth_body_title_san-left">
                                        <span class="rigth_body_title_san-name_san">${item.TEN_SAN} </span>
                                        <span class="rigth_body_title_san-gach_san">/</span>
                                        <span class="rigth_body_title_san-loai_san">${item.LOAI_SAN}</span>
                                    </div>
                                    <span class="rigth_body_title_san-gia_san">${addCommas(item.GIA_SAN)}đ</span>
                                </div>
                                <div class="box_item_dateAndTime">
                                    <div class="box_item_dateAndTime_child">
                            ${item.LisDateTimeChuaDa.map(item2 => `<div class="box_DATE_TIME_CHILD">
                                                <div class="box_item_dateAndTime_child_Date  ">
                                                        <span>${item2.NGAY_DA}</span>
                                                </div>
                                                 <div class="box_item_dateAndTime_child_Time">
                                                            <div class="box_childTime_null" onclick="getDATA(this)">
                                                                 <span class="Time_null_start">${Dom_inputStartTime.value}</span>
                                                                 <span>-</span>
                                                                 <span class="Time_null_end">${Dom_inputEndTime.value}</span>
                                                            </div>
                                                 </div>
                    </div>`).join('')
                    }
</div>
</div>
</div>
                           `
                ).join('')

                S('.BOX_TimKiemSanMain_col_rigth_body').innerHTML = htmlitem
            })
    }
    function TimKiemAllSanChuaDa(ListSanDaDAT, NGAY_BD, NGAY_KT, Listngay1) {
        fetch('/WebSanBong/ListSAN1')
            .then(reponsive => reponsive.json())
            .then(({ dsSan }) => {
                let arraychuadat = dsSan.reduce((lutru, item_dsSan) => {
                    let count = 0
                    ListSanDaDAT.forEach(item_ListSanDatTrong => {
                        if (item_dsSan.MA_SAN == item_ListSanDatTrong.MA_SAN) {
                            count++;
                        }
                    })
                    if (count == 0) {
                        lutru.push({
                            MA_SAN: item_dsSan.MA_SAN,
                            LOAI_SAN: item_dsSan.LOAI_SAN,
                            TEN_SAN: item_dsSan.TEN_SAN,
                            GIA_SAN: item_dsSan.GIA_SAN,
                            LisDateTimeChuaDa: Listngay1.map(item => ({
                                NGAY_DA: item,
                                ListTimeChuaDa: []
                            }))

                        })
                    }
                    return lutru
                }, [])
                const ListSanTrong = [...ListSanDaDAT, ...arraychuadat]
                console.log(ListSanTrong)
                const htmlitem = ListSanTrong.map(item => `<div class="BOX_CHILD" data-id="${item.MA_SAN}">
                                <div class="rigth_body_title_san">
                                    <div class="rigth_body_title_san-left">
                                        <span class="rigth_body_title_san-name_san">${item.TEN_SAN} </span>
                                        <span class="rigth_body_title_san-gach_san">/</span>
                                        <span class="rigth_body_title_san-loai_san">${item.LOAI_SAN}</span>
                                    </div>
                                    <span class="rigth_body_title_san-gia_san">${addCommas(item.GIA_SAN)}đ</span>
                                </div>
                                <div class="box_item_dateAndTime">
                                    <div class="box_item_dateAndTime_child">
                                        ${item.LisDateTimeChuaDa.map(item2 => `${item2.ListTimeChuaDa.every(item5 =>
                    item5.timeBD == undefined || item5.timeKT == undefined
                ) ? `${item2.ListTimeChuaDa.length == 0 ? `
                        <div class="box_DATE_TIME_CHILD">
                                                  <div class="box_item_dateAndTime_child_Date">
                                                    <span>${item2.NGAY_DA}</span>
                                                  </div>
                                                    <div class="box_item_dateAndTime_child_Time">
                                                        <div class="box_childTime_null" onclick="getDATA(this)">
                                                             <span class="Time_null_start">${Dom_inputStartTime.value}</span>
                                                             <span>-</span>
                                                             <span class="Time_null_end">${Dom_inputEndTime.value}</span>
                                                        </div>
                                                    </div>
                        </div>
                                                `: ''}`

                        : `
                        <div class="box_DATE_TIME_CHILD">
                                                  <div class="box_item_dateAndTime_child_Date">
                                                    <span>${item2.NGAY_DA}</span>
                                                  </div>
                                        <div class="box_item_dateAndTime_child_Time">
                                            ${item2.ListTimeChuaDa.map(item3 => {
                            let timBDformat
                            let timKTformat

                            if (item3.timeBD < 1000) {
                                timBDformat = formatTime(`0${item3.timeBD}`)
                            }
                            else {
                                timBDformat = formatTime(item3.timeBD)
                            }
                            if (item3.timeKT < 1000) {
                                timKTformat = formatTime(`0${item3.timeKT}`)
                            }
                            else {
                                timKTformat = formatTime(item3.timeKT)
                            }

                            if (item3.timeBD == undefined || item3.timeKT == undefined) {
                                return ""
                            } else {
                                return `<div class="box_childTime_null" onclick="getDATA(this)">
                                                         <span class="Time_null_start">${timBDformat}</span>
                                                         <span>-</span>
                                                         <span class="Time_null_end">${timKTformat}</span>
                                                    </div>`
                            }
                        }
                        ).join('')}
                                        </div>
                        </div>`
                    }`).join('')
                    }
                                    </div>
                                </div>
                            </div>`).join('')
                S('.BOX_TimKiemSanMain_col_rigth_body').innerHTML = htmlitem
            })
    }
    //code dat san-------------------------------------------------------------------
    function getDATA(node_box_null) {
        let IsLonBe = true
        let IsMucTime = true
        const Listnode_box_null_child = node_box_null.children
        const box_item_dateAndTime_child_Time = node_box_null.parentElement
        const box_DATE_TIME_CHILD = box_item_dateAndTime_child_Time.parentElement
        const Listbox_DATE_TIME_CHILD_child = box_DATE_TIME_CHILD.children
        const box_item_dateAndTime_child = box_DATE_TIME_CHILD.parentElement
        const box_item_dateAndTime = box_item_dateAndTime_child.parentElement
        const BOX_CHILD = box_item_dateAndTime.parentElement
        const ListBOX_CHILD_child = BOX_CHILD.children
        const rigth_body_title_san = ListBOX_CHILD_child[0]
        const rigth_body_title_san_left_child = rigth_body_title_san.children[0]
        const rigth_body_title_san_gia_san = rigth_body_title_san.children[rigth_body_title_san.children.length - 1]
        const LisTrigth_body_title_san_left_child = rigth_body_title_san_left_child.children
        const slect_start_hours = S('#slect_start_hours')
        const slect_end_hours = S('#slect_end_hours')
        const slect_start_minute = S('#slect_start_minute')
        const slect_end_minute = S('#slect_end_minute')
        const editS_Start = S('.form-group-custom.editS_Start .form_select')
        const editS_End = S('.form-group-custom.editS_End .form_select')

        //---------------data-------------------//
        const data_DATSAN = {
            MA_SAN: BOX_CHILD.getAttribute('data-id'),
            LOAI_SAN: LisTrigth_body_title_san_left_child[LisTrigth_body_title_san_left_child.length - 1].innerText,
            TEN_SAN: LisTrigth_body_title_san_left_child[0].innerText,
            DATE: Listbox_DATE_TIME_CHILD_child[0].innerText,
            Time_Start: Listnode_box_null_child[0].innerText,
            Time_End: Listnode_box_null_child[Listnode_box_null_child.length - 1].innerText,
            GIA_SAN: rigth_body_title_san_gia_san.innerText,
        }
        const { MA_SAN, LOAI_SAN, TEN_SAN, Time_Start, Time_End, GIA_SAN, DATE } = data_DATSAN
        let fomatdate = new Date(DATE)
        const DATEnew = `${fomatdate.getFullYear()}-${parseInt(fomatdate.getMonth() + 1) < 10 ? `0${fomatdate.getMonth() + 1}` : `${fomatdate.getMonth() + 1}`}-${parseInt(fomatdate.getDate()) < 10 ? `0${fomatdate.getDate()}` : `${fomatdate.getDate()}`}`
        let ITimeStartList = parseInt(cutTime(Time_Start))
        let ITimeEndList = parseInt(cutTime(Time_End))
        let ITimeStartSoSanh = parseInt(formatTimeSoSanh(Time_Start))
        let ITimeEndSoSanh = parseInt(formatTimeSoSanh(Time_End))
        let ListTIME = ListTime(ITimeStartList, ITimeEndList)
        LoadListTime(ListTIME, slect_start_hours, slect_end_hours)
        const hours_minute_Start = cutTIME_HOURS_MINUTE(Time_Start)
        const hours_minute_End = cutTIME_HOURS_MINUTE(Time_End)


        S('#PAY-MA_SAN').value = MA_SAN
        S('#PAY-LOAI_SAN').value = LOAI_SAN
        S('#PAY-NGAY_DA').value = DATEnew
        S('#PAY-GIA_SAN').value = GIA_SAN
        S('#PAY-TEN_SAN').value = TEN_SAN
        slect_start_hours.value = hours_minute_Start.hours
        slect_end_hours.value = hours_minute_End.hours
        slect_start_minute.value = hours_minute_Start.minute
        slect_end_minute.value = hours_minute_End.minute
        S('.blur').style.display = "block";
        let TimeStartssLonBe = parseInt(slect_start_hours.value + slect_start_minute.value)
        let TimeEndssLonBe = parseInt(slect_end_hours.value + slect_end_minute.value)

        console.log(ITimeStartSoSanh, TimeStartssLonBe)
        //kiem tra gio lon gio, be//---------------------------------------------
        if (TimeStartssLonBe < ITimeStartSoSanh || TimeEndssLonBe > ITimeEndSoSanh) {
            IsMucTime = false
        }
        if (TimeStartssLonBe >= TimeEndssLonBe) {
            IsLonBe = false
        }
        slect_start_hours.oninput = () => {
            TimeStartssLonBe = parseInt(slect_start_hours.value + slect_start_minute.value)

            if (TimeStartssLonBe < ITimeStartSoSanh || TimeEndssLonBe > ITimeEndSoSanh) {
                IsMucTime = false
                alert("Vui Lòng Nhập Đúng Khoảng Thời Gian")
            }
            else {
                IsMucTime = true
            }

            if (TimeStartssLonBe >= TimeEndssLonBe) {
                IsLonBe = false
                alert("Vui Lòng Nhập Giờ Bắt Đầu Bé Hơn Hơn Giờ Kết Thúc")
            }
            else {
                IsLonBe = true
            }
        }
        slect_start_minute.oninput = () => {
            TimeStartssLonBe = parseInt(slect_start_hours.value + slect_start_minute.value)

            if (TimeStartssLonBe < ITimeStartSoSanh || TimeEndssLonBe > ITimeEndSoSanh) {
                IsMucTime = false
                alert("Vui Lòng Nhập Đúng Khoảng Thời Gian")
            }
            else {
                IsMucTime = true
            }
            if (TimeStartssLonBe >= TimeEndssLonBe) {
                IsLonBe = false
                alert("Vui Lòng Nhập Giờ Bắt Đầu Bé Hơn Hơn Giờ Kết Thúc")
            }
            else {
                IsLonBe = true
            }
        }
        slect_end_hours.oninput = () => {
            TimeEndssLonBe = parseInt(slect_end_hours.value + slect_end_minute.value)

            if (TimeStartssLonBe < ITimeStartSoSanh || TimeEndssLonBe > ITimeEndSoSanh) {
                IsMucTime = false
                alert("Vui Lòng Nhập Đúng Khoảng Thời Gian")
            }
            else {
                IsMucTime = true
            }
            if (TimeStartssLonBe >= TimeEndssLonBe) {
                IsLonBe = false
                alert("Vui Lòng Nhập Giờ Kết Thúc Lớn Hơn  Giờ Bắt Đầu")
            }
            else {
                IsLonBe = true
            }
        }
        slect_end_minute.oninput = () => {
            TimeEndssLonBe = parseInt(slect_end_hours.value + slect_end_minute.value)
            if (TimeStartssLonBe < ITimeStartSoSanh || TimeEndssLonBe > ITimeEndSoSanh) {
                IsMucTime = false
                alert("Vui Lòng Nhập Đúng Khoảng Thời Gian")
            }
            else {
                IsMucTime = true
            }

            if (TimeStartssLonBe >= TimeEndssLonBe) {
                IsLonBe = false
                alert("Vui Lòng Nhập Giờ Kết Thúc Lớn Hơn  Giờ Bắt Đầu")
            }
            else {
                IsLonBe = true
            }
        }
        //kiem tra gio lon gio, be//---------------------------------------------
        S('#submit_DAT_SAN').onclick = () => {
            if (IsLonBe && IsMucTime) {
                if (confirm("Bạn Có Muốn Đặt Sân Này")) {
                    loaderON_OFF(true)
                    fetch('/WebSanBong/TienHanhDatSan', {
                        method: 'POST',
                        body: JSON.stringify({
                            MA_SAN: S('#PAY-MA_SAN').value,
                            DATE_DA: S('#PAY-NGAY_DA').value,
                            HoursStart: slect_start_hours.value,
                            minuteStart: slect_start_minute.value,
                            HoursEnd: slect_end_hours.value,
                            minuteEnd: slect_end_minute.value,
                        }),
                        headers: {
                            'Content-type': 'application/json; charset=UTF-8',
                        },
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            loaderON_OFF(false)
                            if (data.ISlogin) {
                                S('.blur').click()
                                TimeSAN_CHUA_DA(KhoanTime(StartTimeEdit, EndTimeEdit), NGAY_BD, NGAY_KT)
                                alert("Đặt Sân Thành Công")
                            }
                            else {
                                Confirm("Vui Lòng Đăng Nhập", "Chọn Có Để Tới Trang Đăng Nhập", "Có", "Không", "/WebSanBong/ListSan")
                            }
                        });
                }
            }
            else {
                alert("Vui Lòng Nhập Giờ Hợp Lệ")
            }
        }



    }
    S('.blur').onclick = () => {
        S('.blur').style.display = "none";
    }
    S('.form_dat_san').onclick = (e) => {
        e.stopPropagation()
    }
    //code dat san--------------------------------------------------------------------
    function customDATA_KHUNGGIO_CHUA_DA2(dataCustomS) {
        const newdata2 = dataCustomS.map(item_dataCustom => ({
            MA_SAN: item_dataCustom.MA_SAN,
            LOAI_SAN: item_dataCustom.LOAI_SAN,
            TEN_SAN: item_dataCustom.TEN_SAN,
            GIA_SAN: item_dataCustom.GIA_SAN,
            LisDateTimeChuaDa: item_dataCustom.ListTimeTrong.map(item_ListTimeTrong => ({
                NGAY_DA: item_ListTimeTrong.NGAY_DA,
                ListTimeChuaDa: item_ListTimeTrong.TIM_CHUA_DA[0].sort(compareValues('timeBD'))
            }))
        }))
        return newdata2
    }
    function customDATA_KHUNGGIO_CHUA_DA(DataKhungGioChuaDaS) {
        let newData = DataKhungGioChuaDaS.map((item1) => ({
            MA_SAN: item1.MA_SAN,
            LOAI_SAN: item1.LOAI_SAN,
            TEN_SAN: item1.TEN_SAN,
            GIA_SAN: item1.GIA_SAN,
            ListTimeTrong: item1.ListTime.map((item2, index2) => ({
                NGAY_DA: item2.NGAY_DA,
                TIM_CHUA_DA: item2.TIME_CHUA_DA.map((item3, index3) => {

                    if (item2.TIME_CHUA_DA.length == 1) {
                        if (item3.Time1.length == 0) {
                            return [{ timeBD: item3.Time2[0], timeKT: item3.Time2[item3.Time2.length - 1] }]
                        }
                        else if (item3.Time2.length == 0) {
                            return [{ timeBD: item3.Time1[0], timeKT: item3.Time1[item3.Time1.length - 1] }]
                        }
                        else {

                            let kq = [{ timeBD: item3.Time2[0], timeKT: item3.Time2[item3.Time2.length - 1] },
                            { timeBD: item3.Time1[0], timeKT: item3.Time1[item3.Time1.length - 1] }]
                            return kq
                        }
                    } else {
                        let dk1 = item2.TIME_CHUA_DA[0].Time1.length
                        let dk2 = item2.TIME_CHUA_DA[item2.TIME_CHUA_DA.length - 1].Time2.length
                        let kq1 = []
                        if (dk1 != 0) {
                            kq1.push({ timeBD: item2.TIME_CHUA_DA[0].Time1[0], timeKT: item2.TIME_CHUA_DA[0].Time1[item2.TIME_CHUA_DA[0].Time1.length - 1] })
                        }
                        if (dk2 != 0) {
                            kq1.push({ timeBD: item2.TIME_CHUA_DA[item2.TIME_CHUA_DA.length - 1].Time2[0], timeKT: item2.TIME_CHUA_DA[item2.TIME_CHUA_DA.length - 1].Time2[item2.TIME_CHUA_DA[item2.TIME_CHUA_DA.length - 1].Time2.length - 1] })
                        }
                        const lengthArr = item2.TIME_CHUA_DA.length - 1
                        for (var i = 0; i < lengthArr; i++) {
                            let Time2_0 = item2.TIME_CHUA_DA[i].Time2[0]

                            let Time1_1 = item2.TIME_CHUA_DA[i + 1].Time1[item2.TIME_CHUA_DA[i + 1].Time1.length - 1]

                            if (Time2_0 != Time1_1) {
                                kq1.push({ timeBD: Time2_0, timeKT: Time1_1 })
                            }
                        }
                        return kq1
                    }


                })
            }))
        }))
        return newData
    }
    function dataTimeTrong(listDonS, KhungGioS) {
        const DAT_MOI = listDonS.map(listDon => ({
            MA_SAN: listDon.MA_SAN,
            TEN_SAN: listDon.TEN_SAN,
            LOAI_SAN: listDon.LOAI_SAN,
            GIA_SAN: listDon.GIA_SAN,
            NGAY_DA: formatDatesosanh(cutDATE(listDon.NGAY_DA)),
            KHUNG_GIO: { start: listDon.TIME_START, end: listDon.TIME_END }
        }))

        let data_chong = []
        DAT_MOI.forEach((item, index) => {
            data_chong.push({
                MA_SAN: item.MA_SAN,
                TEN_SAN: item.TEN_SAN,
                LOAI_SAN: item.LOAI_SAN,
                NGAY_DA: item.NGAY_DA,
                GIA_SAN: item.GIA_SAN,
                Time_rongBeHonStart: [],
                Time_rongLonHonEnd: [],
            })

            KhungGioS.forEach(KhungGio => {


                if (KhungGio <= item.KHUNG_GIO.start) {
                    if (item.KHUNG_GIO.start != KhungGioS[0]) {
                        data_chong[index].Time_rongBeHonStart.push(KhungGio)
                    }

                }
                if (KhungGio >= item.KHUNG_GIO.end) {
                    if (item.KHUNG_GIO.end != KhungGioS[KhungGioS.length - 1]) {
                        data_chong[index].Time_rongLonHonEnd.push(KhungGio)
                    }
                }
            })
        })

        return data_chong
    }
    function KhoanTime(TimeStart, TimeEnd) {
        let intTimeStart = parseInt(TimeStart)
        let intTimeEnd = parseInt(TimeEnd)
        let ListTime = []
        for (var i = intTimeStart; i <= intTimeEnd; i = i + 50) {
            let kq
            let IsTime = IsCHAN_LE(i)
            if (IsTime % 2 != 0) {
                kq = i - 20
            }
            else {
                kq = i
            }
            ListTime.push(kq)
        }
        return ListTime
    }
    function IsCHAN_LE(value) {
        const I_String = String(value)
        let cutStringIS = I_String.slice(-2, -1)
        return parseInt(cutStringIS)
    }
    function IsArray(Array_filter) {
        let array_MA_SAN = Array_filter.reduce((ltru, item) => {
            let kq = ltru.push(item.MA_SAN)
            return ltru
        }, [])
        let isArray = new Set(array_MA_SAN)
        let isArray1 = []
        return isArray1 = [...isArray]
    }
    function customArray2(IsArrays, ArrayCustoms, KhungGioS) {

        let arrayCustomnew = []
        IsArrays.forEach((IsArray, index1) => {

            arrayCustomnew.push({ ListTime: [] })

            ArrayCustoms.forEach((ArrayCustom, index2) => {

                if (IsArray == ArrayCustom.MA_SAN) {
                    arrayCustomnew[index1].MA_SAN = ArrayCustom.MA_SAN
                    arrayCustomnew[index1].TEN_SAN = ArrayCustom.TEN_SAN
                    arrayCustomnew[index1].LOAI_SAN = ArrayCustom.LOAI_SAN
                    arrayCustomnew[index1].GIA_SAN = ArrayCustom.GIA_SAN
                    arrayCustomnew[index1].ListTime.push({

                        NGAY_DA: ArrayCustom.NGAY_DA,
                        Time_rongBeHonStart: ArrayCustom.Time_rongBeHonStart,
                        Time_rongLonHonEnd: ArrayCustom.Time_rongLonHonEnd
                    })

                }

            })
        });

        let isArrNgay = IS_ARR_NGAY(arrayCustomnew)
        let arrLast = []
        isArrNgay.forEach((item1, index1) => {
            arrLast.push({ ListTime: [] })
            arrLast[index1].MA_SAN = arrayCustomnew[index1].MA_SAN
            arrLast[index1].TEN_SAN = arrayCustomnew[index1].TEN_SAN
            arrLast[index1].LOAI_SAN = arrayCustomnew[index1].LOAI_SAN
            arrLast[index1].GIA_SAN = arrayCustomnew[index1].GIA_SAN
            item1.isArr.forEach((item2, index2) => {

                arrLast[index1].ListTime.push({ TIME_CHUA_DA: [] })

                arrayCustomnew[index1].ListTime.forEach((item3, INDEX3) => {

                    if (item2 == item3.NGAY_DA) {

                        arrLast[index1].ListTime[index2].NGAY_DA = item3.NGAY_DA
                        arrLast[index1].ListTime[index2].TIME_CHUA_DA.push({ Time1: item3.Time_rongBeHonStart, Time2: item3.Time_rongLonHonEnd })
                    }
                })
            })
        })

        function IS_ARR_NGAY(arrayCustomnew) {

            function IsArraydate(Array_filter_date) {
                let array_MA_SAN = Array_filter_date.reduce((ltru, item) => {
                    let kq = ltru.push(item.NGAY_DA)
                    return ltru
                }, [])
                let isArray = new Set(array_MA_SAN)
                let isArray1 = []
                return isArray1 = [...isArray]
            }

            let IS_ARR_DATE = arrayCustomnew.reduce((lutru, itemcustom) => {

                lutru.push({ isArr: IsArraydate(itemcustom.ListTime) })
                return lutru

            }, [])
            return IS_ARR_DATE
        }
        return arrLast

    }

    //sap xep tang dan custom cho obj
    function compareValues(key, order = 'asc') {
        return function (a, b) {
            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                // không tồn tại tính chất trên cả hai object
                return 0;
            }

            const varA = (typeof a[key] === 'string') ?
                a[key].toUpperCase() : a[key];
            const varB = (typeof b[key] === 'string') ?
                b[key].toUpperCase() : b[key];

            let comparison = 0;
            if (varA > varB) {
                comparison = 1;
            } else if (varA < varB) {
                comparison = - 1;
            }
            return (
                (order == 'desc') ? (comparison * - 1) : comparison
            );
        };
    }
    //.................................
    function cutDATE(cut) {
        var cutstring = cut.slice(6, 19)
        var date2 = parseInt(cutstring)
        var date = new Date(date2)
        return date
    }
    function formatDatesosanh(dateformar) {
        var date = `${dateformar.getFullYear()}-${dateformar.getMonth() + 1}-${dateformar.getDate()}`

        return date
    }
    const addCommas = value => {
        const stringFormat = `${value}`;
        const x = stringFormat.split('.');
        let x1 = x[0];
        const x2 = x.length > 1 ? `.${x[1]}` : '';
        const regex = /(\d+)(\d{3})/;
        while (regex.test(x1)) {
            x1 = x1.replace(regex, '$1,$2');
        }
        return x1 + x2;
    };
    function formatTime(time) {
        let Stime = `${time}`
        let arrStime = Stime.split('')
        let newarrStime = arrStime.reduce((ltru, item, index) => {
            if (index == 2) {
                ltru.push(`:${item}`)
                return ltru
            } else {
                ltru.push(item)
                return ltru
            }
        }, []).join('')

        return newarrStime
    }
    function formatdate2(date) {
        let arrSDate = date.split('-')
        let arrSDateReverse = arrSDate.reverse()
        return arrSDateReverse.join('')
    }
    function ListDate(Time_start, Time_end) {
        let ngayBd9 = new Date(`${Time_start}`)
        let ngaykt9 = new Date(`${Time_end}`)
        let arrIntDate = []
        for (ngayBd9; ngayBd9 <= ngaykt9; ngayBd9 = new Date(ngayBd9.setDate(ngayBd9.getDate() + 1))) {
            arrIntDate.push(formatdateList(ngayBd9))
        }
        return arrIntDate
    }
    function formatdateList(Indate) {
        return `${Indate.getFullYear()}-${Indate.getMonth() + 1}-${Indate.getDate()}`
    }
    function cutTime(Time) {
        return Time.slice(0, 2)
    }
    function formatTimeSoSanh(time) {
        let Stime = `${time}`
        let arrStime = Stime.split('')
        let newarrStime = arrStime.reduce((ltru, item, index) => {
            if (index != 2) {
                ltru.push(item)

            }
            return ltru
        }, []).join('')

        return newarrStime
    }
    function ListTime(TimeStart, TimeEnd) {
        const ListTime = []
        for (TimeStart; TimeStart <= TimeEnd; TimeStart++) {
            ListTime.push(TimeStart)
        }
        return ListTime
    }
    function LoadListTime(dataList, slect_start_hours, slect_end_hours) {
        const htmlTimeList = dataList.map(item => `<option value="${item < 10 ? `0${item}` : `${item}`}">${item < 10 ? `0${item}` : `${item}`}</option>`).join('')
        slect_start_hours.innerHTML = htmlTimeList
        slect_end_hours.innerHTML = htmlTimeList
    }
    function cutTIME_HOURS_MINUTE(TIME) {
        return {
            hours: TIME.slice(0, 2),
            minute: TIME.slice(3, 5),
        }
    }
    function Confirm(title, msg, $true, $false, $link) { /*change*/
        var $content = "<div class='dialog-ovelay'>" +
            "<div class='dialog'><header>" +
            " <h3> " + title + " </h3> " +
            "<i class='fa fa-close'></i>" +
            "</header>" +
            "<div class='dialog-msg'>" +
            " <p> " + msg + " </p> " +
            "</div>" +
            "<footer>" +
            "<div class='controls'>" +
            " <button class='button button-danger doAction'>" + $true + "</button> " +
            " <button class='button button-default cancelAction'>" + $false + "</button> " +
            "</div>" +
            "</footer>" +
            "</div>" +
            "</div>" +
            "<a id='click_link' href=" + $link + " style='display:none'>ádasdasd</a>";
        $('body').prepend($content);
        $('.doAction').click(function () {
            S('#click_link').click()
            $(this).parents('.dialog-ovelay').fadeOut(500, function () {
                $(this).remove();
            });
        });
        $('.cancelAction, .fa-close').click(function () {
            $(this).parents('.dialog-ovelay').fadeOut(500, function () {
                $(this).remove();
            });
        });

    }

</script>

<style>
    #id_quayLai {
        font-size: 2rem;
        text-decoration: none;
        display: block;
        margin-top: 17px;
        color: black;
    }
        #id_quayLai:hover {
            color: var(--color-text);
        }
    .btn_timKiem_sanTrong:hover {
        opacity: 0.7;
        cursor: pointer;
    }
    .dialog-ovelay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.50);
        z-index: 999999
    }

    .dialog-ovelay .dialog {
            width: 400px;
            margin: 100px auto 0;
            background-color: #fff;
            box-shadow: 0 0 20px rgba(0,0,0,.2);
            border-radius: 3px;
            overflow: hidden
        }

    .dialog-ovelay .dialog header {
                padding: 10px 8px;
                background-color: #f6f7f9;
                border-bottom: 1px solid #e5e5e5
            }

    .dialog-ovelay .dialog header h3 {
                    font-size: 14px;
                    margin: 0;
                    color: #555;
                    display: inline-block
                }

    .dialog-ovelay .dialog header .fa-close {
                    float: right;
                    color: #c4c5c7;
                    cursor: pointer;
                    transition: all .5s ease;
                    padding: 0 2px;
                    border-radius: 1px
                }

    .dialog-ovelay .dialog header .fa-close:hover {
                        color: #b9b9b9
                    }

    .dialog-ovelay .dialog header .fa-close:active {
                        box-shadow: 0 0 5px #673AB7;
                        color: #a2a2a2
                    }

    .dialog-ovelay .dialog .dialog-msg {
                padding: 12px 10px
            }

    .dialog-ovelay .dialog .dialog-msg p {
                    margin: 0;
                    font-size: 15px;
                    color: #333
                }

    .dialog-ovelay .dialog footer {
                border-top: 1px solid #e5e5e5;
                padding: 8px 10px
            }

    .dialog-ovelay .dialog footer .controls {
                    direction: rtl
                }

    .dialog-ovelay .dialog footer .controls .button {
                        padding: 5px 15px;
                        border-radius: 3px
                    }

    .link {
        padding: 5px 10px;
        cursor: pointer
    }
    .button {
        cursor: pointer
    }
    .button:hover{
        opacity:0.7;
    }
    .button-default {
        background-color: rgb(248, 248, 248);
        border: 1px solid rgba(204, 204, 204, 0.5);
        color: #5D5D5D;
    }

    .button-danger {
        background-color: #f44336;
        border: 1px solid #d32f2f;
        color: #f5f5f5
    }
    *{
        box-sizing:border-box;
    }
    :root {
        --width-input: 420px;
    }
    .form-group-custom {
        margin: 20px 0;
        display: flex;
        flex-direction: column;
        width: var(--width-input);
    }
    
    .blur {
        
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        z-index: 1000;
        display:none;
    }
   
    .form_dat_san--main {
        padding: 0 20px;
    }
    .form-group-custom input{
        height:32px;
        outline: none;
        border:none;
        border-radius:5px;
        padding-left: 10px;
    }
    .form-group-custom select {
        width: calc(var(--width-input) / 2 - 2px);
        outline: none;
        border: none;
        border-radius: 5px;
        padding-left: 10px;
        height: 32px;
    }
    .form-group-custom label {
        font-size: 1.6rem;
        margin-bottom: 5px;
    }
    .form_dat_san--main-title {
        margin-top: 20px;
        margin-bottom: 6px;
        font-size: 2.5rem;
        text-align: center;
        color: white;
    }
    .form_dat_san--main button {
        margin: 10px 0 20px 0;
        width: 100%;
        border-radius: 5px;
        border: none;
        height: 34px;
        font-size: 2rem;
        background-color: #90e0ef;
        color:white;
    }
        .form_dat_san--main button:hover{
            opacity:0.5;
            cursor:pointer;
        }
        .form_dat_san {
            position: absolute;
            background-color: #8BC6EC;
            background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);
            left: 50%;
            transform: translateX(-50%);
            z-index: 2000;
            top: 18px;
            border-radius: 10px;
            animation :modaanimation linear 0.3s
        }
        @@keyframes modaanimation{
            0%{
                opacity:0.4
            }
            50% {
                opacity: 0.7
            }
            100% {
                opacity:1
            }
        }
   
    .box_childTime_null:hover {
        cursor: pointer;
        color: #CF0A0A;
        display: block;
        padding-left: 10px;
        transition: all 0.3s linear;
    }
   
    .css_nodata {
        font-size: 4rem;
        color: red;
        display: flex;
        justify-content: center;
        margin-top: 100px
    }
    .css_nodata span{
        margin-right:6px
    }
    .BOX_TimKiemSanMain_col_rigth_body {
        background-color: white;
        width: 90%;
        margin: 0 auto;
        height: 500px;
        overflow: auto;
        /*overflow: -moz-scrollbars-none;*/
        -ms-overflow-style: none;
        box-shadow: 3px 26px 20px rgb(0 0 0 / 32%);
    }

       /* .BOX_TimKiemSanMain_col_rigth_body::-webkit-scrollbar {
            width: 0 !important;
            display: none;
        }*/

    .rigth_body_title_san {
        font-size: 2rem;
        background-color: #FD841F;
        display: flex;
        color: white;
    }

    .rigth_body_title_san-left {
        display: flex;
        margin-left: 10px;
        flex-grow: 1;
    }

    .rigth_body_title_san-gia_san {
        margin-right: 5px;
    }

    .rigth_body_title_san-gach_san {
        margin: 0 5px;
    }

    .box_item_dateAndTime_child_Date {
        font-size: 1.8rem;
        font-size: 1.8rem;
        color: #FD841F;
        margin: 7px 0 10px 20px;
    }

        .box_item_dateAndTime_child_Date span {
            border: 2px solid #FD841F;
            border-radius: 4px;
            display: block;
            width: 100px;
            text-align: center;
        }
        .box_item_dateAndTime_child_Date.edit span {
            border: 2px solid #FD841F;
            border-radius: 4px;
            display: block;
            width: 220px;
            text-align: center;
        }

    .box_item_dateAndTime_child_Time .box_childTime_null {
        font-size: 1.6rem;
        margin-left: 40px;
        margin-bottom: 5px;
    }
</style>